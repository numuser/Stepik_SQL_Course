-- Таблица genre:
-- +----------+-------------+
-- | genre_id | name_genre  |
-- +----------+-------------+
-- | 1        | Роман       |
-- | 2        | Поэзия      |
-- | 3        | Приключения |
-- +----------+-------------+

-- Таблица author:
-- +-----------+------------------+
-- | author_id | name_author      |
-- +-----------+------------------+
-- | 1         | Булгаков М.А.    |
-- | 2         | Достоевский Ф.М. |
-- | 3         | Есенин С.А.      |
-- | 4         | Пастернак Б.Л.   |
-- | 5         | Лермонтов М.Ю.   |
-- +-----------+------------------+

-- Таблица book:
-- +---------+-----------------------+-----------+----------+--------+--------+
-- | book_id | title                 | author_id | genre_id | price  | amount |
-- +---------+-----------------------+-----------+----------+--------+--------+
-- | 1       | Мастер и Маргарита    | 1         | 1        | 670.99 | 3      |
-- | 2       | Белая гвардия         | 1         | 1        | 540.50 | 5      |
-- | 3       | Идиот                 | 2         | 1        | 460.00 | 10     |
-- | 4       | Братья Карамазовы     | 2         | 1        | 799.01 | 3      |
-- | 5       | Игрок                 | 2         | 1        | 480.50 | 10     |
-- | 6       | Стихотворения и поэмы | 3         | 2        | 650.00 | 15     |
-- | 7       | Черный человек        | 3         | 2        | 570.20 | 6      |
-- | 8       | Лирика                | 4         | 2        | 518.99 | 2      |
-- +---------+-----------------------+-----------+----------+--------+--------+

-- 2.2 Joins
-- Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.
SELECT title, name_genre, price
FROM genre JOIN book
ON genre.genre_id = book.genre_id
WHERE amount > 8
ORDER BY price DESC;

-- Оператор внешнего соединения LEFT OUTER JOIN  (можно использовать LEFT JOIN) соединяет две таблицы.
-- Порядок таблиц для оператора важен, поскольку оператор не является симметричным.
-- Результат запроса формируется так:
-- в результат включается внутреннее соединение (INNER JOIN) первой и второй таблицы в соответствии с условием;
-- затем в результат добавляются те записи первой таблицы, которые не вошли во внутреннее соединение на шаге 1,
-- для таких записей соответствующие поля второй таблицы заполняются значениями NULL.

-- Вывести название всех книг каждого автора, если книг некоторых авторов в данный момент нет на складе – вместо названия книги указать Null.
-- SELECT name_author, title 
-- FROM author LEFT JOIN book
--      ON author.author_id = book.author_id
-- ORDER BY name_author; 

-- Результат:

-- +------------------+-----------------------+
-- | name_author      | title                 |
-- +------------------+-----------------------+
-- | Булгаков М.А.    | Мастер и Маргарита    |
-- | Булгаков М.А.    | Белая гвардия         |
-- | Достоевский Ф.М. | Игрок                 |
-- | Достоевский Ф.М. | Идиот                 |
-- | Достоевский Ф.М. | Братья Карамазовы     |
-- | Есенин С.А.      | Стихотворения и поэмы |
-- | Есенин С.А.      | Черный человек        |
-- | Лермонтов М.Ю.   | NULL                  |
-- | Пастернак Б.Л.   | Лирика                |
-- +------------------+-----------------------+

-- Так как в таблице book нет книг Лермонтова, напротив этой фамилии стоит Null.

-- Вывести все жанры, которые не представлены в книгах на складе.
SELECT name_genre
FROM genre LEFT JOIN book
ON genre.genre_id = book.genre_id
WHERE title IS NULL;

-- Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом.
-- Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать Дата.
SELECT name_city, name_author, DATE_ADD('2020-01-01',
                                        INTERVAL FLOOR(RAND() * 365) DAY) as Дата
FROM city, author -- CROSS JOIN
ORDER BY name_city, Дата DESC;

-- Запрос на выборку может выбирать данные из двух и более таблиц базы данных. При этом таблицы должны быть логически связаны между собой.
-- Для каждой пары таблиц, включаемых в запрос, необходимо указать свой оператор соединения. Наиболее распространенным является внутреннее соединение INNER JOIN

-- Вывести информацию о книгах (жанр, книга, автор), относящихся к жанру, включающему слово «роман» в отсортированном по названиям книг виде.
SELECT name_genre, title, name_author
FROM
    genre
    JOIN book ON genre.genre_id = book.genre_id
    JOIN author ON author.author_id = book.author_id
WHERE name_genre LIKE 'Роман%'
ORDER BY title;   

-- В запросах с групповыми функциями могут использоваться несколько таблиц, между которыми используются различные типы соединений.
-- Пример:
-- Вывести количество различных книг каждого автора. Информацию отсортировать в алфавитном порядке по фамилиям  авторов.
-- SELECT name_author, count(title) AS Количество
-- FROM 
--     author INNER JOIN book
--     ON author.author_id = book.author_id
-- GROUP BY name_author
-- ORDER BY name_author;

-- При использовании соединения INNER JOIN мы не можем узнать, что книг Лермонтова на складе нет, но предполагается, что они могут быть. 
-- Чтобы автор Лермонтов был включен в результат, нужно изменить соединение таблиц.
-- SELECT name_author, count(title) AS Количество
-- FROM 
--     author LEFT JOIN book
--     ON author.author_id = book.author_id
-- GROUP BY name_author
-- ORDER BY name_author;

SELECT name_author, SUM(amount) as Количество
FROM
    author 
    LEFT JOIN book ON author.author_id = book.author_id
GROUP BY name_author
HAVING Количество < 10 
ORDER BY Количество;

-- В запросах, построенных на нескольких таблицах, можно использовать вложенные запросы. Вложенный запрос может быть включен:  после ключевого слова SELECT, 
-- после FROM и в условие отбора после WHERE (HAVING).
-- Пример
-- Вывести авторов, общее количество книг которых на складе максимально.
-- Это достаточно сложный запрос, поэтому будем решать его по шагам (реализуя каждый запрос по отдельности), а потом объединим все запросы в один.
-- Шаг 1. Найдем суммарное количество книг на складе по каждому автору. Поскольку фамилии автора в этой таблице нет, то группировку будем осуществлять по author_id.
--     SELECT author_id, SUM(amount) AS sum_amount FROM book GROUP BY author_id
--     +-----------+------------+
--     | author_id | sum_amount |
--     +-----------+------------+
--     | 1         | 8          |
--     | 2         | 23         |
--     | 3         | 21         |
--     | 4         | 2          |
--     +-----------+------------+
-- Шаг 2. В результирующей таблице предыдущего запроса необходимо найти максимальное значение, то есть 23.
-- Для этого запросу, созданному на шаге 1, необходимо присвоить имя (например, query_in) и использовать его в качестве таблицы-источника после FROM. Затем уже находить максимум по столбцу sum_amount.
--     SELECT MAX(sum_amount) AS max_sum_amount
--     FROM 
--         (
--         SELECT author_id, SUM(amount) AS sum_amount 
--         FROM book 
--         GROUP BY author_id
--         ) query_in
--     +----------------+
--     | max_sum_amount |
--     +----------------+
--     | 23             |
--     +----------------+
-- Шаг 3. Выведем фамилию автора и общее количество книг для него.
-- SELECT name_author, SUM(amount) as Количество
-- FROM 
--     author INNER JOIN book
--     on author.author_id = book.author_id
-- GROUP BY name_author
-- +------------------+------------+
-- | name_author      | Количество |
-- +------------------+------------+
-- | Булгаков М.А.    | 8          |
-- | Достоевский Ф.М. | 23         |
-- | Есенин С.А.      | 21         |
-- | Пастернак Б.Л.   | 2          |
-- +------------------+------------+
-- Шаг 4.  Включим запрос с шага 2 в условие отбора запроса с шага 3. И получим всех авторов, общее количество книг которых максимально.
-- SELECT name_author, SUM(amount) as Количество
-- FROM 
--     author INNER JOIN book
--     on author.author_id = book.author_id
-- GROUP BY name_author
-- HAVING SUM(amount) = 
--      (/* вычисляем максимальное из общего количества книг каждого автора */
--       SELECT MAX(sum_amount) AS max_sum_amount
--       FROM 
--           (/* считаем количество книг каждого автора */
--             SELECT author_id, SUM(amount) AS sum_amount 
--             FROM book GROUP BY author_id
--           ) query_in
--       );
-- +------------------+------------+
-- | name_author      | Количество |
-- +------------------+------------+
-- | Достоевский Ф.М. | 23         |
-- +------------------+------------+

-- Вывести в алфавитном порядке всех авторов, которые пишут только в одном жанре. Поскольку у нас в таблицах так занесены данные,
-- что у каждого автора книги только в одном жанре,  для этого запроса внесем изменения в таблицу book. Пусть у нас  книга Есенина «Черный человек» относится к жанру «Роман», 
-- а книга Булгакова «Белая гвардия» к «Приключениям» (эти изменения в таблицы уже внесены).
SELECT name_author
FROM author
JOIN book ON author.author_id = book.author_id
GROUP BY name_author
HAVING COUNT(DISTINCT(genre_id)) = 1
ORDER BY name_author
